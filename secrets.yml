---
- hosts: localhost
  become: yes
  vars:
    primary_gpg_keyid: 8859AB55ED3CEF31E9C1316A992A867530CC0D4F
    primary_ssh_keygrip: 2E5C2C9F1D68FC2827DBD52AC3CBC7A791B84DFD
  tasks:
  - name: Install required secrets applications
    become: true
    package:
      name:
        - gnupg
        - expect
        - pass

  - name: Check if gpg key is imported
    command: 'gpg --list-keys | grep {{ primary_gpg_keyid }}'
    register: gpg_status
    ignore_errors: true

  - name: Wait for gnupg key
    pause:
      prompt: Place <your own> private.key.gpg in /tmp and press any key. This repo contains mine.
    when: gpg_status is failed

  - name: Import private key
    raw: 'gpg --output - --decrypt /tmp/private.key.gpg | gpg --import -'
    when: gpg_status is failed

  - name: Trust private key
    raw: 'expect -c "spawn gpg --edit-key {{ primary_gpg_keyid }} trust quit; send \"5\ry\r\"; expect eof"'
    when: gpg_status is failed

  - name: Remove private.key.gpg
    file:
      path: /tmp/private.key.gpg
      state: absent
    when: gpg_status is failed
      
  - name: Setup SSH Authentication
    lineinfile:
      path: '$HOME/.gnupg/gpg-agent.conf'
      line: enable-ssh-support
      create: yes
      mode: '0600'
    when: gpg_status is failed
    
  - name: Write Keygrip to sshcontrol
    lineinfile:
      path: '$HOME/.gnupg/sshcontrol'
      line: '{{ primary_ssh_keygrip }}'
      create: yes
      mode: '0600'
    when: gpg_status is failed

  - name: Add secrets lines to .bashrc
    lineinfile:
      path: '$HOME/.bashrc'
      line: '{{ item }}'
      create: yes
      mode: '644'
    loop:
      - 'export GPG_TTY=$(tty)'
      - 'export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)'
      - 'gpgconf --launch gpg-agent'

  - name: Add secrets lines to .profile (vscode default shell)
    lineinfile:
      path: '$HOME/.profile'
      line: '{{ item }}'
      create: yes
      mode: '644'
    loop:
      - 'export GPG_TTY=$(tty)'
      - 'export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)'
      - 'gpgconf --launch gpg-agent'

  - name: See if pass has been initialized
    become: no
    command: 'pass'
    register: pass_status
    ignore_errors: true

  - name: Initialize pass
    become: no
    command: 'pass init {{ primary_gpg_keyid }}'
    when: pass_status is failed